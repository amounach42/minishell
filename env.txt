Environment variables are not specific to the C language, any program that runs on your system has a set of predefined environment variables. Those are global variables defined and passed to the process that runs your program from its parent process (every single process has a parent, except for init, which is the father of all user processes). They define different things that may affect your program’s behavior, like the name of the default shell or text editor, the PATH that is searched for binary executables, and so forth.

When your C program runs, the kernel passes control to the main function which has the signature:

int main(int argc, char **argv) 
Correct? Actually, the signature more accurately looks like this:


int main(int argc, char **argv, char **environ) 

The third parameter is an array of KEY=VALUE strings that is NULL-terminated, i.e. every string consists of a key and a value, like so:

LANG=en_US.utf8 
You can get the list of all the environment variables by running the env command:

$ env 
XDG_MENU_PREFIX=gnome- 
LANG=en_US.utf8 
GDM_LANG=en_US.utf8 
… 
From a C program, you can get the value associated with an environment key by calling getenv:

char * getenv (const char *name) 
You can set (or clear) the value associated with an environment variable by calling putenv:

int putenv (char *string) 
For more information on environment variables in C, please read this section in the GNU C Library manual.
https://www.gnu.org/software/libc/manual/html_node/Environment-Access.html#Environment-Access